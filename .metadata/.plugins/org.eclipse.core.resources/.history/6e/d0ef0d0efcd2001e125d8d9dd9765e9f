package com.batch.batchImpl;

import java.util.ArrayList;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.batch.dto.BatchDto;
import com.batch.dto.TeacherDto;
import com.batch.entities.Batch;
import com.batch.entities.Course;
import com.batch.exception.ResourceNotFoundException;
import com.batch.repository.BatchRepository;

@Service
public class BatchServiceImpl implements com.batch.service.batchService{

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private BatchRepository repository;		
	
	@Autowired
	private ModelMapper modelMaper;
	
	@Override
	public BatchDto getBatch(int bId) throws ResourceNotFoundException {							
		
		BatchDto batchDto = new BatchDto();
		Batch batch = this.repository.findById(bId).orElseThrow(()-> new ResourceNotFoundException("Batch"," Id ",String.valueOf(bId)));
		
		batchDto.setBatchTitle(batch.getBatchTitle());		
		batchDto.setStartDate(batch.getStartDate());
		batchDto.setEndDate(batch.getEndDate());
		batchDto.setDuration(batch.getDuration());
		batchDto.setImage(batch.getImage());		
		batchDto.setStatus(batch.getStatus());
		batchDto.setTime(batch.getTime());
		batchDto.setBId(batch.getBId());
		batchDto.setLocation(batch.getLocation());						
		
		Course course = this.restTemplate.getForObject("http://course-service/course/"+batch.getCourseId(),Course.class);		
		TeacherDto teacherDto = this.restTemplate.getForObject("http://teacher-service/teacher/"+batch.getTeacherId(),TeacherDto.class);
		batchDto.setCourse(course);
		batchDto.setTeacherDto(teacherDto);		
		return  batchDto;
	}

	@Override
	public Batch saveBatch(Batch batch) {
		
		return this.repository.save(batch);						
	}

	@Override
	public Batch updateBatch(int bId, Batch updateBatch) throws ResourceNotFoundException {
		
		Batch batch = this.repository.findById(bId).orElseThrow(()-> new ResourceNotFoundException("Batch","Id",String.valueOf(bId)));		
		batch.setBatchTitle(updateBatch.getBatchTitle());
		batch.setCourseId(updateBatch.getCourseId());
		batch.setDuration(updateBatch.getDuration());
		batch.setStartDate(updateBatch.getStartDate());
		batch.setEndDate(updateBatch.getEndDate());
		batch.setImage(updateBatch.getImage());
		batch.setStatus(updateBatch.getStatus());		
		batch.setTeacherId(updateBatch.getTeacherId());
		batch.setTime(updateBatch.getTime());				
		return this.repository.save(batch);				
	}

	@Override
	public boolean delete(int bId) throws ResourceNotFoundException {
		
		boolean status=false;		
		Batch batch = this.repository.findById(bId).orElseThrow(()-> new ResourceNotFoundException("Batch","Id",String.valueOf(bId)));		
		if(batch!=null)
		{
			this.repository.deleteById(bId);
			status=true;
		}
		return status;
	}

	@Override
	public List<BatchDto> getAllBatch() {
		
		List<Batch> findAll = this.repository.findAll();
		
		List<BatchDto> batchDtoList=new ArrayList<>();
		
		for (Batch batch : findAll) {
			BatchDto batchDto= new BatchDto();
			
			//Course course = this.restTemplate.getForObject("http://course-service/course/"+batch.getCourseId(),Course.class);
			
			batchDto.setBId(batch.getBId());
			batchDto.setBatchTitle(batch.getBatchTitle());
			batchDto.setStartDate(batch.getStartDate());
			batchDto.setEndDate(batch.getEndDate());
			batchDto.setDuration(batch.getDuration());			
			batchDto.setStatus(batch.getStatus());
			batchDto.setLocation(batch.getLocation());
			batchDto.setTime(batch.getTime());						
			//batchDto.setCourse(course);
						
			TeacherDto teacher = this.restTemplate.getForObject("http://teacher-service/teacher/"+batch.getTeacherId(),TeacherDto.class);
			
			batchDto.setTeacherDto(teacher);
			
			batchDtoList.add(batchDto);
			
		}		
		return batchDtoList;
	}

	@Override
	public List<BatchDto> getAllBatchByTeacherId(int tId) {
		
		List<Batch> findAllByTeacherId = this.repository.findAllByTeacherId(tId);		
		
		List<BatchDto> batchDtoList=new ArrayList<>();
		for (Batch batch : findAllByTeacherId) {
			
			BatchDto batchDto= new BatchDto();			
			Course course = this.restTemplate.getForObject("http://course-service/course/"+batch.getCourseId(),Course.class);		
			batchDto.setBId(batch.getBId());
			batchDto.setBatchTitle(batch.getBatchTitle());
			batchDto.setStartDate(batch.getStartDate());
			batchDto.setEndDate(batch.getEndDate());
			batchDto.setDuration(batch.getDuration());
			batchDto.setStatus(batch.getStatus());
			batchDto.setLocation(batch.getLocation());
			batchDto.setTime(batch.getTime());						
			batchDto.setCourse(course);			
			
			TeacherDto teacher = this.restTemplate.getForObject("http://teacher-service/teacher/"+batch.getTeacherId(),TeacherDto.class);			
			batchDto.setTeacherDto(teacher);
			batchDtoList.add(batchDto);
		}		
		
		return batchDtoList;
	}

	@Override
	public List<BatchDto> getBatchByTeacherId(int tId) {
		
		List<BatchDto> batchList=new ArrayList<>();
		
		 List<Batch> findAllByTeacherId = this.repository.findAllByTeacherId(tId);
		
		 for (Batch batch : findAllByTeacherId) {			 
			 
			 BatchDto batchDto = modelMaper.map(batch,BatchDto.class);
			  Course course = this.restTemplate.getForObject("http://course-service/course/"+batch.getCourseId(),Course.class);
			  batchDto.setCourse(course);
			  			  
			  batchList.add(batchDto);
		}
		 
		return batchList;
	}
	
}