package com.course.daoImpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.course.dao.CourseDao;
import com.course.entity.Course;
import com.course.exception.ResourceNotFoundException;
import com.course.repository.CourseRepository;

@Service
public class CourseDaoImpl implements CourseDao{

	@Autowired
	private CourseRepository repository;

	List<Course> list= List.of(
			new Course(101,"Java Developer","Description","HTML","1000"),
			new Course(102,"MICROSERVICES Developer","Description","HTML","1000"),
			new Course(103,"Pathon Developer","Description","HTML","1000"),
			new Course(104,"PHP Developer","Description","HTML","1000"),
			new Course(105,"SQL Developer","Description","HTML","1000")
			);	
	
	@Override
	public List<Course> get(int id) {
		
		
		this.repository.findById(id).orElseThrow(()->new ResourceNotFoundException("Course Not Found","Id",String.valueOf(id)));
		
		  List<Course> collect = list.stream()
	                .filter(course -> course.getCid() == id).collect(Collectors.toList());
	                					 
		 return collect;
	}

	@Override
	public Course saveCourse(Course course) {
		
		Course save = this.repository.save(course);		
		return save;
	}

	@Override
	public boolean delete(int cId) throws ResourceNotFoundException {

		this.repository.findById(cId).orElseThrow(()-> new ResourceNotFoundException("Emp","Id",String.valueOf(cId)));
		
		return true;
	}
}