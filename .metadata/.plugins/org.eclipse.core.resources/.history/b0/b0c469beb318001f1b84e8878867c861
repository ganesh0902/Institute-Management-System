package com.apigateway;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

public class Example {

    private static final int CHUNK_SIZE = 1024 * 1024; // 1 MB

    public static void main(String[] args) {
//        if (args.length != 2) {
//            System.err.println("Usage: java LargeStringReverser <inputFile> <outputFile>");
//            System.exit(1);
//        }

        String inputFilePath = "inputFile.txt";
        String outputFilePath = "outputFile.txt";

        try {
            reverseLargeFile(inputFilePath, outputFilePath);
        } catch (IOException e) {
            System.err.println("Error processing the file: " + e.getMessage());
        }
    }
  
    public static void reverseLargeFile(String inputFilePath, String outputFilePath) throws IOException {
        File inputFile = new File(inputFilePath);
        long fileSize = inputFile.length();

        try (RandomAccessFile inputRAF = new RandomAccessFile(inputFile, "r")) {
            Path outputPath = Paths.get(outputFilePath);
            if (Files.exists(outputPath)) {
                Files.delete(outputPath);
            }
            Files.createFile(outputPath);

            long remainingBytes = fileSize;
            long position = fileSize;

            while (remainingBytes > 0) {
                int bytesToRead = (int) Math.min(CHUNK_SIZE, remainingBytes);
                position -= bytesToRead;
                inputRAF.seek(position);

                byte[] buffer = new byte[bytesToRead];
                inputRAF.readFully(buffer);

                reverseBuffer(buffer);

                Files.write(outputPath, buffer, StandardOpenOption.APPEND);

                remainingBytes -= bytesToRead;
            }
        }
    }

    /**
     * Reverses the content of the given byte array.
     *
     * @param buffer the byte array to reverse
     */
    private static void reverseBuffer(byte[] buffer) {
        int left = 0;
        int right = buffer.length - 1;

        while (left < right) {
            byte temp = buffer[left];
            buffer[left] = buffer[right];
            buffer[right] = temp;
            left++;
            right--;
        }
    }
}

